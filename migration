#!/usr/bin/env php
<?php

require_once './vendor/autoload.php';

use Doctrine\DBAL\DriverManager;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Configuration\Migration\PhpFile;
use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Tools\Console\Command;
use Symfony\Component\Console\Application;

$env = parse_ini_file("./env.ini", true);

$dbParams = [
	'dbname'    => $env["DATABASE"]["database"],
	'user'      => $env["DATABASE"]["user"],
	'password'  => $env["DATABASE"]["password"],
	'host'      => $env["MIGRATIONS"]["db_host"] ?? $env["DATABASE"]["host"],
	'driver'    => 'pdo_mysql'
];

$connection = DriverManager::getConnection($dbParams);

$connection->getDatabasePlatform()->registerDoctrineTypeMapping('enum', 'string');

$config = new PhpFile('migrations.php'); // Or use one of the Doctrine\Migrations\Configuration\Configuration\* loaders

$dependencyFactory = DependencyFactory::fromConnection($config, new ExistingConnection($connection));

$cli = new Application('Doctrine Migrations');
$cli->setCatchExceptions(true);

$cli->addCommands(array(
	new Command\DumpSchemaCommand($dependencyFactory),
	new Command\ExecuteCommand($dependencyFactory),
	new Command\GenerateCommand($dependencyFactory),
	new Command\LatestCommand($dependencyFactory),
	new Command\ListCommand($dependencyFactory),
	new Command\MigrateCommand($dependencyFactory),
	new Command\RollupCommand($dependencyFactory),
	new Command\StatusCommand($dependencyFactory),
	new Command\SyncMetadataCommand($dependencyFactory),
	new Command\VersionCommand($dependencyFactory),
));

return $cli->run();
